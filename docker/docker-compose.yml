version: "3.8"
services:
  clients-service:
    container_name: clients_service
    depends_on:
      clients-postgres:
        condition: service_healthy
    build:
      context: ../clients-service
      dockerfile: Dockerfile
    ports:
      - "8100:8080"
    networks:
      - spring-cloud-network

  clients-postgres:
    container_name: clients_postgresdb
    image: postgres:16.1
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./provisioning/:/docker-entrypoint-initdb.d/
      - /home/stud2019/9kluczka/gr2_hotel_room_reservations/volumes/postgres:/var/lib/postgresql/data
    networks:
      - spring-cloud-network
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 5s
      timeout: 3s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    depends_on:
      - clients-postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "5050:80"
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - spring-cloud-network

  reservations-service:
    container_name: reservations_service
    build:
      context: ../reservations-service
      dockerfile: Dockerfile
    ports:
      - "8101:8080"
    networks:
      - spring-cloud-network

  information-mongo:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_DATABASE=room_info_db
    volumes:
      - ./provisioning/:/docker-entrypoint-initdb.d/
      - /home/stud2019/9kluczka/gr2_hotel_room_reservations/volumes/mongo:/data/db
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  information-service:
    container_name: information_service
    depends_on:
      information-mongo:
        condition: service_healthy
    build:
      context: ../information-service
      dockerfile: Dockerfile
    ports:
      - "8102:8080"
    networks:
      - spring-cloud-network

  notifications-rabbit:
    container_name: notifications_rabbit
    image: rabbitmq:3.12.12-management-alpine
    environment:
      - RABBITMQ_CONFIG_FILE=/docker-entrypoint-initdb.d/rabbitmq.conf
    ports:
      - "5672:5672"  # rabbitmq
      - "5051:15672" # rabbitmq-management
    volumes:
      - ./config/rabbit/rabbitmq.conf:/docker-entrypoint-initdb.d/rabbitmq.conf:ro
      - ./config/rabbit/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - spring-cloud-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  notifications-viewer:
    container_name: notifications_viewer
    depends_on:
      notifications-rabbit:
        condition: service_healthy
    build:
      context: ../notifications-viewer
      dockerfile: Dockerfile
    ports:
      - "5052:8080"
    networks:
      - spring-cloud-network

networks:
  spring-cloud-network:
    driver: bridge
