version: "3.8"
name: allegro_hotel
services:
  #  SERVICES

# REPLACE WITH RABBIT
#  notifications-service:
#    depends_on:
#      - kafka-zookeeper
#      - kafka-broker
#    build:
#      context: ../notifications-service
#      dockerfile: ../notifications-service/Dockerfile
#    environment:
#      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/test
#      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker:9092
#      - SERVER_PORT=8082
#    ports:
#      - "8082:8082"
#    labels:
#      - prometheus-job
#    networks:
#      - spring-cloud-network

#  kafka-zookeeper:
#    image: confluentinc/cp-zookeeper:6.2.0
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    networks:
#      - spring-cloud-network

#  kafka-broker:
#    image: confluentinc/cp-kafka:6.2.0
#    depends_on:
#      - kafka-zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#    networks:
#      - spring-cloud-network

  users_service:
    container_name: users_service
    depends_on:
      - users_postgres
    build:
      context: ../users-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATA_POSTGRESDB_URI=postgresql://postgres:postgres@users_postgres:5432/postgres
      - USERS_SERVICE_HOST=http://users-service:8100
      - SECURITY_ENABLED=false
    ports:
      - "8100:8080"
    networks:
      - spring-cloud-network

  users_postgres:
    container_name: users_postgresdb
    image: postgres:16.1
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      - spring-cloud-network

  reservations_service:
    container_name: reservations_service
    depends_on:
      - reservations_mongo
    build:
      context: ../reservations-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://reservations_local:reservations_local@reservations_mongo:27017/reservations_local
      - RESERVATIONS_SERVICE_HOST=http://reservations-service:8101
      - SECURITY_ENABLED=false
    ports:
      - "8101:8080"
    networks:
      - spring-cloud-network

  reservations_mongo:
    container_name: reservations_mongodb
    image: mongo:7.0.4
    environment:
      - MONGO_INITDB_DATABASE=reservations_local
    ports:
      - "27017:27017"
    volumes:
      - ./provisioning/:/docker-entrypoint-initdb.d/
    networks:
      - spring-cloud-network

#  resources-service:
#    build:
#      context: ../resources-service
#      dockerfile: Dockerfile
#    environment:
#      - SECURITY_ENABLED=false
#      - SERVER_PORT=8080
#    ports:
#      - "8080:8080"
#    labels:
#      - prometheus-job
#    networks:
#      - spring-cloud-network

#  resources-redis-cache:
#    image: redis:6.2
#    ports:
#      - "6379:6379"
#    networks:
#      - spring-cloud-network

  #INFRASTRUCTURE
#  prometheus:
#    image: prom/prometheus:v2.31.1
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#    networks:
#      - spring-cloud-network
#  grafana:
#    image: grafana/grafana:8.3.0
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./provisioning/grafana/datasources:/etc/grafana/provisioning/datasources/
#      - ./provisioning/grafana/dashboards-config:/etc/grafana/provisioning/dashboards/
#      - ./provisioning/grafana/dashboards:/var/lib/grafana/dashboards
#    networks:
#      - spring-cloud-network

#  elasticsearch:
#    build:
#      context: elasticsearch/
#      dockerfile: Dockerfile
#      args:
#        ELK_VERSION: $ELK_VERSION
#    volumes:
#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
#      - elasticsearch:/usr/share/elasticsearch/data:z
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    environment:
#      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
#      ELASTIC_PASSWORD: changeme #user elastic
#      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
#      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
#      discovery.type: single-node
#    networks:
#      - spring-cloud-network

#  logstash:
#    build:
#      context: logstash/
#      dockerfile: Dockerfile
#      args:
#        ELK_VERSION: $ELK_VERSION
#    volumes:
#      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
#      - ./logstash/pipeline:/usr/share/logstash/pipeline
#    ports:
#      - "9600:9600"
#      - "12201:12201/udp"
#    environment:
#      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#    depends_on:
#      - elasticsearch
#    networks:
#      - spring-cloud-network

#  kibana:
#    build:
#      context: kibana/
#      dockerfile: Dockerfile
#      args:
#        ELK_VERSION: $ELK_VERSION
#    volumes:
#      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#    networks:
#      - spring-cloud-network
#NETWORK
networks:
  spring-cloud-network:
    driver: bridge

#volumes:
#  elasticsearch: