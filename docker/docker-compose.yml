version: "3.8"
name: allegro_hotel
services:
  users-service:
    container_name: users-service
    depends_on:
      users_postgres:
        condition: service_healthy
    build:
      context: ../users-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATA_POSTGRESDB_URI=postgresql://postgres:postgres@users_postgres:5432/postgres
      - USERS_SERVICE_HOST=http://users-service:8100
      - SECURITY_ENABLED=false
    ports:
      - "8100:8080"
    networks:
      - spring-cloud-network

  users_postgres:
    container_name: users_postgresdb
    image: postgres:16.1
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./provisioning/:/docker-entrypoint-initdb.d/
    networks:
      - spring-cloud-network
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 5s
      timeout: 3s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    depends_on:
      - users_postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "5050:80"
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - spring-cloud-network

  reservations_service:
    container_name: reservations_service
    build:
      context: ../reservations-service
      dockerfile: Dockerfile
    environment:
      - RESERVATIONS_SERVICE_HOST=http://reservations-service:8101
      - SECURITY_ENABLED=false
    ports:
      - "8101:8080"
    networks:
      - spring-cloud-network

  information_mongo:
    image: mongo:6.0
    environment:
    - MONGO_INITDB_DATABASE=room_info_db
    ports:
      - "27018:27017"
    volumes:
      - ./provisioning/:/docker-entrypoint-initdb.d/
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  information-service:
    container_name: information-service
    depends_on:
      information_mongo:
        condition: service_healthy
    build:
      context: ../information-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://user:password@information_mongo:27017/room_info_db
      - INFORMATION_SERVICE_HOST=http://information-service:8102
      - SECURITY_ENABLED=false
    ports:
      - "8102:8080"
    networks:
      - spring-cloud-network

  notifications_rabbit:
    container_name: notifications_rabbit
    image: rabbitmq:3.12.12-management-alpine
    environment:
      - RABBITMQ_CONFIG_FILE=/docker-entrypoint-initdb.d/rabbitmq.conf
    ports:
      - "5672:5672"  # rabbitmq
      - "5051:15672" # rabbitmq-management
    volumes:
      - ./config/rabbit/rabbitmq.conf:/docker-entrypoint-initdb.d/rabbitmq.conf:ro
      - ./config/rabbit/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - spring-cloud-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  notifications_viewer:
    container_name: notifications_viewer
    depends_on:
      notifications_rabbit:
        condition: service_healthy
    build:
      context: ../notifications-viewer
      dockerfile: Dockerfile
    ports:
      - "5052:8080"
    networks:
      - spring-cloud-network

networks:
  spring-cloud-network:
    driver: bridge
